전에는 yaml 파일로 했었음


graphql API 타입 다운받기
  1. graphql codegen 접속
  2. yarn add --dev @graphql-codegen/cli 설치(graphql, typescript도 설치 해야함)
  3. codegen.ts 파일 생성 후 아래 코드 넣기
    import type { CodegenConfig } from '@graphql-codegen/cli'
 
    const config: CodegenConfig = {
      schema: 'http://main-practice.codebootcamp.co.kr/graphql',  //🎈 api 엔드포인트 주소 입력하면 타입 다운
      documents: ['src/**/*.tsx'],                    //🎈 ts로 저장할 것이기에 src/**/*.ts 추가
      generates: {
          './src/entities/api': {                            //🎈 저장할 위치
            preset: 'client',
          }
      }
    }
    export default config

  4. 해당 codegen.ts는 최상위 루트에 생성한다. (package.json 위치)
  5. package.json에 들어가 scripts에 실행 명령어 추가(2번에 설치로 가능)
     "codegen": "graphql-codegen --config codegen.ts"
    추가 했으면 yarn codegen 으로 실행해 타입 파일을 받아온다.
    에러 있으면 node_modules, yarn.lock 삭제 후 다시 yarn install 후 yarn codegen
    추가 에러가 있으면 documents 주적 처리하고 다시 yarn codegen하면 됨
  6. 그럼 해당 /entities/api에 파일 여러개 생성이 되는데 여기서 graphql.ts가 메인이다.
     이전 documents를 통해 설치를 했으면 graphql.ts의 맨 아래에 export const CreateBoardDocument 등 여러개가 있을 것이다.
     이건 gql, 타입 등 안해도 알아서 해줘 편의성은 좋음


graphql SSR 요청
  useQuery, useMutation은 CSR에서만 동작을 한다.
  ssr 요청을 하기 위해서는 client를 통해 요청을 한다.

  const { data } = await client.query<
    Pick<Query, "fetchBoardsOfTheBest">
  >({
    query: BOARDS_OF_THE_BEST,
    fetchPolicy: "cache-first",
  });

 이렇게 해서 ssr 요청을 할 수 있으며 client는 다음과 같이 추가한다.

  export const client = new ApolloClient({
    ssrMode: typeof window === "undefined",
    uri: process.env.NEXT_PUBLIC_GRAPHQL_URL, // 환경변수로 GraphQL 서버 URI 설정
    cache: new InMemoryCache(),
  });
  여기서 ssrMode를 추가해주면 된다.



이미지 불러오기 - next.js 의 Image 태그
next.config.ts에서
images: {
  domains: ["storage.googleapis.com"], // 외부 이미지 도메인 추가
},
외부 도메인을 추가해줘야 가져올 수 있다.

<Image
  key={el}
  src={`https://storage.googleapis.com/${el}`}
  alt="dd"
  width={30}
  height={30}
  unoptimized // 최적화 비활성화
/>
이미지를 wedp로 최적화로 가져오는데 원본 이미지로 가져오기 위해서는 unoptimized 사용하면 된다.



이미지 서버에 저장하기
  이미지를 Storage에 저장하는 API 요청에 에러가 생기는데 백엔드을 통해 엔드포인트 서버로 가는게
  아닌 다른 DB 즉 Storage에 가는과정에 오류가 생긴걸로 추측..

  그래서 apollo-upload-client를 --dev로 설치를 해주고 ApolloProvider의 client에 들어가
  createUploadLink함수를 불러온다.

  const GLOBAL_STATE = new InMemoryCache();

  const uploadLink = createUploadLink({
    uri: process.env.NEXT_PUBLIC_GRAPHQL_URL,
  }) as unknown as ApolloLink;

  export const client = new ApolloClient({
    link: ApolloLink.from([uploadLink]),
    cache: GLOBAL_STATE,
  });
  이렇게 해주면 정상적으로 이미지를 Storage에 저장하고 이미지 다운받을 수 있는 url 반환한다.






🎈 리페치 성능 개선
1. 댓글 등록, 수정, 삭제 요청 후 댓글 목록 API 요청없이 업데이트 하기
   ReplyInput, Reply 참고

const onSubmit: SubmitHandler<IFormInput> = async (data) => {
  console.log("Form Data:", data);
  await createBoardCommentInput({
    variables: {
      createBoardCommentInput: {
        writer: data.writer,
        password: data.password,
        rating: value,
        contents: data.contents,
      },
      boardId,
    },
    refetchQueries: ["fetchBoardComments"],
  });
  reset();
  setValue(0);
};

현재 이렇게 댓글을 추가하고 refetch를 통해 댓글 목록을 업데이트를 하고 있다.
그럼 등록 API / 리페치 API로 2번의 API 요청이 일어나는데
리페치 API를 보내지 않고 ApolloCache를 수정해 업데이트 하는 방법으로 업데이트를 할 것이다.

refetchQueries: ["fetchBoardComments"]를 지우고 그 자리에 update()를 사용한다.

update(cache, {data}) {
  cache.modify({
    fields: {
      fetchBoardComments: (prev) => {
        return [data.createBoardComment, ...prev]
      }
    }
  })
}
이렇게 해주면 등록 API만 요청으로 댓글 목록도 업데이트 할 수 있다.
여기서 data는 createBoardCommentInput의 데이터 값이다.

삭제 같은 경우 추가되는 점이 있다.
update(cache, {data}) {
  cache.modify({
    fields: {
      fetchBoardComments: (prev, { readField }) => {
        const deletedId = data.deleteBoardComment
        const filteredPrev = prev.filter(
          (el) => readField("_id", el) !== deletedId
        );
        return [...filteredPrev]
      }
    }
  })
}
readField를 추가를 했는데 그냥 el이 아닌 _id로 명확하게 지정을 해줘야한다.
이유가 prev를 출력을 해보면 ref로 id 값이 있어 el로 id값을 가져올 수 없다.
그래서 readField를 통해 ref에 들어가 _id를 가져와야 한다.
(el._id 가 아닌 이유는 delete에 반환 값이 _id만 있어 굳이 사용할 필요없다.)

하지만 updateBoardComment는 refetchQueries, update() 없이도 댓글 목록이 업데이트가 된다.
정확한 이유는 모르겠지만 같은 BoardComment 타입의 id를 사용하고 있어 캐싱에 자동으로
업데이트가 되지 않나 싶음.


cache.modify / cache.writeQuery 의 차이
modify: 있는 데이터를 수정 할 수 있다.
writeQuery: 없는 데이터를 추가, 수정 할 수 있다.


🎈 옵티미스틱UI: 성공을 예상하고 화면에 미리 업데이트 하기



🎈 로그인
로그인을 하면 해당 accessToken을 저장을 하고 인증이 필요한 API 요청에 headers에 토큰을 넣어
요청을 한다.

그럼 이 accessToken을 저장을 해뒀다 인증 요청에 같이 보내야 하는데 어디에 저장을 해야할까?
4가지 방법이 있다.
- 로컬스토리지
- 세션스토리지
- 쿠키
- 변수(메모리)

chat-gpt에서는 보안과 편의성 모두 고려하면 accessToken은 상태 변수에 저장을 하고
refreshToken은 HttpOnly 쿠키로 관리하는 것이 가장 보안적인 방법이라 한다.

accessToken을 상태 변수가 아닌 쿠키에 저장을 하면 credentials: "include"로
Authorization: `Bearer ${accessToken}` 대신 쿠키 값을 넘겨줘 
백엔드에 처리하도록 해줘야 한다
쿠키는 다음과 같이 저장한다.

document.cookie = `accessToken=${accessToken}; path=/; max-age=3600; secure;`;
document.cookie = accessToken을 저장한다.
path=/ = 모든 페이지에서 접근 가능
max-age=3600 = 1시간 유지
secure = HTTPS에서만 전송
sameSite = CSRF 보안해준다.

하지만 해당 accessToken을 HttpOnly없이 저장을 하게 되면 XSS 보안에 취약하지만
가장 많이 사용하고 있는 방식이 쿠키에 secure, sameSite를 통해 쿠키를 저장한다.